procedure start;

variable SrcObj;
variable SrcIsParty;

procedure destroy_p_proc;
procedure talk_p_proc;
procedure Critter_Action;
procedure damage_p_proc;
procedure timed_event_p_proc;
procedure description_p_proc;

import variable killing_women;

procedure guard00;
procedure guard01;
procedure guard02;
procedure guard03;
procedure guard04;
procedure guard05;
procedure guard06;
procedure guard07;
procedure guard07a;
procedure guard07b;
procedure guard08;
procedure guard09;
procedure guard10;
procedure guard11;
procedure guard12;
procedure guard13;
procedure guard14;
procedure guard15;
procedure guardend;
procedure combat;
procedure PickDeadBodyType;
procedure items_held;
procedure get_reaction;
procedure ReactToLevel;
procedure LevelToReact;
procedure UpReact;
procedure DownReact;
procedure BottomReact;
procedure TopReact;
procedure BigUpReact;
procedure BigDownReact;
procedure UpReactLevel;
procedure DownReactLevel;
procedure Goodbyes;

variable hostile;
variable initialized;
variable rndz;
variable Weapons;
variable exit_line;
variable RightHand;
variable LeftHand;
variable PIDright;
variable PIDleft;
variable SubtypeWEP;
variable DeathType := 56;
variable LastTime;

variable atk1;
variable atk2;
variable atk3;
variable atk4;
variable atk5;
variable atk6;
variable atk7;
variable shotgun;
variable assault;
variable SMG;
variable grenFrag;
variable spear;
variable knife;
//variable weapons;
variable raiders;
variable wepSelect;
variable wepSelect2;
variable raidSelect;
variable dist;

procedure start begin
   variable LVar0 := 0;
   if (global_var(12)) then begin
      if (cur_map_index == 24) then begin
         if (local_var(6) != 1) then begin
            set_local_var(6, 1);
            call PickDeadBodyType();
            kill_critter(self_obj, DeathType);
         end
      end
   end
   else begin
      if (local_var(12) != 1) then begin
         if (metarule(14, 0)) then begin
            if (metarule(22, 0) == 0) then begin
               if (get_critter_stat(self_obj, 7) > 0) then begin
                  critter_heal(self_obj, 999);
               end
               if (global_var(330)) then begin
                  if (critter_inven_obj(self_obj, 0) <= 0) then begin
                     if (obj_carrying_pid_obj(self_obj, 17)) then begin
                        debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING COMBAT ARMOR...");
                        LVar0 := obj_carrying_pid_obj(self_obj, 17);
                        rm_obj_from_inven(self_obj, LVar0);
                        add_obj_to_inven(self_obj, LVar0);
                        wield_obj_critter(self_obj, LVar0);
                     end
                     else begin
                        if (obj_carrying_pid_obj(self_obj, 2)) then begin
                           debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING METAL ARMOR...");
                           LVar0 := obj_carrying_pid_obj(self_obj, 2);
                           rm_obj_from_inven(self_obj, LVar0);
                           add_obj_to_inven(self_obj, LVar0);
                           wield_obj_critter(self_obj, LVar0);
                        end
                        else begin
                           if (obj_carrying_pid_obj(self_obj, 1)) then begin
                              debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER ARMOR...");
                              LVar0 := obj_carrying_pid_obj(self_obj, 1);
                              rm_obj_from_inven(self_obj, LVar0);
                              add_obj_to_inven(self_obj, LVar0);
                              wield_obj_critter(self_obj, LVar0);
                           end
                           else begin
                              if (obj_carrying_pid_obj(self_obj, 74)) then begin
                                 debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING LEATHER JACKET...");
                                 LVar0 := obj_carrying_pid_obj(self_obj, 74);
                                 rm_obj_from_inven(self_obj, LVar0);
                                 add_obj_to_inven(self_obj, LVar0);
                                 wield_obj_critter(self_obj, LVar0);
                              end
                              else begin
                                 if (obj_carrying_pid_obj(self_obj, 113)) then begin
                                    debug_msg("Fallout Fixt - Warning: CRITTER " + obj_pid(self_obj) + " HAD ARMOR BUT EMPTY ARMOR SLOT. EQUIPPING ROBES...");
                                    LVar0 := obj_carrying_pid_obj(self_obj, 113);
                                    rm_obj_from_inven(self_obj, LVar0);
                                    add_obj_to_inven(self_obj, LVar0);
                                    wield_obj_critter(self_obj, LVar0);
                                 end
                              end
                           end
                        end
                     end
                  end
               end
               set_local_var(12, 1);
            end
         end
      end
      if (not(initialized)) then begin
         initialized := 1;
         item_caps_adjust(self_obj, random(1, get_critter_stat(dude_obj, 6) * 2));
         critter_add_trait(self_obj, 1, 6, 6);
         critter_add_trait(self_obj, 1, 5, 21);
         debug_msg("RAIDGRD init complete.");
      end
      if (script_action == 21) then begin
         script_overrides;
         display_msg(message_str(136, 101));
      end
      else begin
         if (script_action == 22) then begin
            call timed_event_p_proc();
         end
         else begin
            if (script_action == 12) then begin
               call Critter_Action();
            end
            else begin
               if (script_action == 3) then begin
                  call description_p_proc();
               end
               else begin
                  if (script_action == 4) then begin
                     hostile := 1;
                  end
                  else begin
                     if (script_action == 14) then begin
                        call damage_p_proc();
                     end
                     else begin
                        if (script_action == 18) then begin
                           call destroy_p_proc();
                        end
                        else begin
                           if (script_action == 11) then begin
                              call talk_p_proc();
                           end
                        end
                     end
                  end
               end
            end
         end
      end
   end
end

procedure destroy_p_proc begin
   variable LVar0 := 0;
   variable LVar1 := 0;
   variable LVar2 := 0;
   variable LVar3 := 0;
   variable LVar4 := 0;
   variable LVar5 := 0;
   variable LVar6 := 0;
   variable LVar7 := 0;
   variable LVar8 := 0;
   set_global_var(115, global_var(115) - 1);
   if (source_obj > 0) then begin
      SrcObj := 0;
      SrcIsParty := 0;
      SrcObj := obj_pid(source_obj);
      if (party_member_obj(SrcObj)) then begin
         SrcIsParty := 1;
      end
   end
   if ((source_obj == dude_obj) or (SrcIsParty == 1)) then begin
      set_global_var(254, 1);
      set_global_var(611, 0);
   end
   rm_timer_event(self_obj);
   if (global_var(460) and not(global_var(0)) and (critter_inven_obj(self_obj, 1) or critter_inven_obj(self_obj, 2))) then begin
      if (global_var(325)) then begin
         debug_msg("Weapon Drop BEGINS");
      end
      if (critter_inven_obj(self_obj, 1) > 0) then begin
         LVar0 := critter_inven_obj(self_obj, 1);
      end
      if (critter_inven_obj(self_obj, 2) > 0) then begin
         LVar1 := critter_inven_obj(self_obj, 2);
      end
      if (critter_inven_obj(self_obj, 0) > 0) then begin
         LVar2 := critter_inven_obj(self_obj, 0);
      end
      if (LVar0) then begin
         LVar3 := obj_pid(LVar0);
      end
      if (LVar1) then begin
         LVar4 := obj_pid(LVar1);
      end
      if (LVar2) then begin
         LVar5 := obj_pid(LVar2);
      end
      LVar6 := tile_num_in_direction(tile_num(self_obj), random(0, 5), random(global_var(461), global_var(462)));
      if ((LVar3 != 19) and (LVar3 != 21) and (LVar3 != 79) and (LVar3 != 205) and (LVar3 != 234) and (LVar3 != 235) and (LVar3 != 244) and (LVar4 != 19) and (LVar4 != 21) and (LVar4 != 79) and (LVar4 != 205) and (LVar4 != 234) and (LVar4 != 235) and (LVar4 != 244)) then begin
         if (LVar0 > 0) then begin
            if (obj_item_subtype(LVar0) == 3) then begin
               rm_obj_from_inven(self_obj, LVar0);
               move_to(LVar0, LVar6, elevation(self_obj));
            end
         end
         if (LVar1 > 0) then begin
            if (obj_item_subtype(LVar1) == 3) then begin
               rm_obj_from_inven(self_obj, LVar1);
               move_to(LVar1, LVar6, elevation(self_obj));
            end
         end
         if (global_var(325)) then begin
            debug_msg("Weapon Drop ENDS");
         end
      end
   end
   if (source_obj == dude_obj) then begin
      set_global_var(160, global_var(160) + 1);
      if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(317) == 1))) then begin
         set_global_var(317, 1);
         set_global_var(157, 0);
      end
      if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
         set_global_var(157, 1);
         set_global_var(317, 0);
      end
      if ((global_var(160) % 6) == 0) then begin
         set_global_var(155, global_var(155) + 1);
      end
   end
   if (global_var(329)) then begin
      if (critter_inven_obj(self_obj, 0) > 0) then begin
         LVar7 := critter_inven_obj(self_obj, 0);
         rm_obj_from_inven(self_obj, LVar7);
         destroy_object(LVar7);
      end
      else begin
         LVar8 := obj_carrying_pid_obj(self_obj, 74);
         if (LVar8 > 0) then begin
            rm_obj_from_inven(self_obj, LVar8);
            destroy_object(LVar8);
         end
         else begin
            LVar8 := obj_carrying_pid_obj(self_obj, 1);
            if (LVar8 > 0) then begin
               rm_obj_from_inven(self_obj, LVar8);
               destroy_object(LVar8);
            end
            else begin
               LVar8 := obj_carrying_pid_obj(self_obj, 113);
               if (LVar8 > 0) then begin
                  rm_obj_from_inven(self_obj, LVar8);
                  destroy_object(LVar8);
               end
               else begin
                  LVar8 := obj_carrying_pid_obj(self_obj, 2);
                  if (LVar8 > 0) then begin
                     rm_obj_from_inven(self_obj, LVar8);
                     destroy_object(LVar8);
                  end
                  else begin
                     LVar8 := obj_carrying_pid_obj(self_obj, 17);
                     if (LVar8 > 0) then begin
                        rm_obj_from_inven(self_obj, LVar8);
                        destroy_object(LVar8);
                     end
                     else begin
                        LVar8 := obj_carrying_pid_obj(self_obj, 239);
                        if (LVar8 > 0) then begin
                           rm_obj_from_inven(self_obj, LVar8);
                           destroy_object(LVar8);
                        end
                        else begin
                           LVar8 := obj_carrying_pid_obj(self_obj, 3);
                           if (LVar8 > 0) then begin
                              rm_obj_from_inven(self_obj, LVar8);
                              destroy_object(LVar8);
                           end
                           else begin
                              LVar8 := obj_carrying_pid_obj(self_obj, 232);
                              if (LVar8 > 0) then begin
                                 rm_obj_from_inven(self_obj, LVar8);
                                 destroy_object(LVar8);
                              end
                              else begin
                                 LVar8 := obj_carrying_pid_obj(self_obj, 240);
                                 if (LVar8 > 0) then begin
                                    rm_obj_from_inven(self_obj, LVar8);
                                    destroy_object(LVar8);
                                 end
                              end
                           end
                        end
                     end
                  end
               end
            end
         end
      end
   end
   rm_timer_event(self_obj);
end

procedure defend begin
   game_time_advance(game_ticks(1500));
   display_msg("You stood guard for 25 minutes");
   shotgun := create_object_sid(94, 0, 0, -1);
   spear := create_object_sid(7, 0, 0, -1);
   knife := create_object_sid(4, 0, 0, -1);
   assault := create_object_sid(23, 0, 0, -1);
   SMG := create_object_sid(9, 0, 0, -1);
   grenFrag := create_object_sid(25, 0, 0, -1);
   atk1 := create_object_sid(16777419, 0, 0, 640); //419, 434, 439, 472 Raider pids
   atk2 := create_object_sid(16777434, 0, 0, 640); //759, 750, 751 Raider random encounters script
   atk3 := create_object_sid(16777439, 0, 0, 640);
   atk4 := create_object_sid(16777472, 0, 0, 640);
   atk5 := create_object_sid(16777283, 0, 0, 113); //283 Shady sands guard
   atk6 := create_object_sid(16777303, 0, 0, 113);
   atk7 := create_object_sid(16777389, 0, 0, 113);
   //weapons := [shotgun, assault, SMG, grenFrag, spear, knife]; //These arrays crash the game
   //raiders := [atk1, atk2, atk3, atk4];
   wepSelect := random(0, 5);
   wepSelect2 := random(0, 5);
   raidSelect := random(0, 3);
   dist := random(1, 3);
   /*switch(dist) begin
      case 0: display_msg("0");
      case 1: display_msg("1");
      case 2: display_msg("2");
      case 3: display_msg("3");
   end*/
   //set_global_var(246, 1);
   if global_var(246) == 1 then begin //If Shady Sands is an enemy
     critter_attempt_placement(atk5, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
     add_obj_to_inven(atk5, knife);
     add_obj_to_inven(atk5, shotgun);
     wield_obj_critter(atk5, knife);
   end
   else begin
     switch(raidSelect) begin
        case 0: critter_attempt_placement(atk1, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
        case 1: critter_attempt_placement(atk2, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
        case 2: critter_attempt_placement(atk3, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
        case 3: critter_attempt_placement(atk4, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
     end
     switch(wepSelect) begin
        case 0:
        switch(raidSelect) begin //Equiping weapons for every case of random raider
           case 0: add_obj_to_inven(atk1, shotgun);
           wield_obj_critter(atk1, shotgun);
           case 1: add_obj_to_inven(atk2, shotgun);
           wield_obj_critter(atk2, shotgun);
           case 2: add_obj_to_inven(atk3, shotgun);
           wield_obj_critter(atk3, shotgun);
           case 3: add_obj_to_inven(atk4, shotgun);
           wield_obj_critter(atk4, shotgun);
        end
        case 1:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, assault);
           wield_obj_critter(atk1, assault);
           case 1: add_obj_to_inven(atk2, assault);
           wield_obj_critter(atk2, assault);
           case 2: add_obj_to_inven(atk3, assault);
           wield_obj_critter(atk3, assault);
           case 3: add_obj_to_inven(atk4, assault);
           wield_obj_critter(atk4, assault);
        end
        case 2:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, SMG);
           wield_obj_critter(atk1, SMG);
           case 1: add_obj_to_inven(atk2, SMG);
           wield_obj_critter(atk2, SMG);
           case 2: add_obj_to_inven(atk3, SMG);
           wield_obj_critter(atk3, SMG);
           case 3: add_obj_to_inven(atk4, SMG);
           wield_obj_critter(atk4, SMG);
        end
        case 3:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, grenFrag);
           wield_obj_critter(atk1, grenFrag);
           case 1: add_obj_to_inven(atk2, grenFrag);
           wield_obj_critter(atk2, grenFrag);
           case 2: add_obj_to_inven(atk3, grenFrag);
           wield_obj_critter(atk3, grenFrag);
           case 3: add_obj_to_inven(atk4, grenFrag);
           wield_obj_critter(atk4, grenFrag);
        end
        case 4:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, spear);
           wield_obj_critter(atk1, spear);
           case 1: add_obj_to_inven(atk2, spear);
           wield_obj_critter(atk2, spear);
           case 2: add_obj_to_inven(atk3, spear);
           wield_obj_critter(atk3, spear);
           case 3: add_obj_to_inven(atk4, spear);
           wield_obj_critter(atk4, spear);
        end
        case 5:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, knife);
           wield_obj_critter(atk1, knife);
           case 1: add_obj_to_inven(atk2, knife);
           wield_obj_critter(atk2, knife);
           case 2: add_obj_to_inven(atk3, knife);
           wield_obj_critter(atk3, knife);
           case 3: add_obj_to_inven(atk4, knife);
           wield_obj_critter(atk4, knife);
        end
     end
     switch(wepSelect2) begin
        case 0:
        switch(raidSelect) begin //Equiping weapons for every case of random raider
           case 0: add_obj_to_inven(atk1, shotgun);
           case 1: add_obj_to_inven(atk2, shotgun);
           case 2: add_obj_to_inven(atk3, shotgun);
           case 3: add_obj_to_inven(atk4, shotgun);
        end
        case 1:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, assault);
           case 1: add_obj_to_inven(atk2, assault);
           case 2: add_obj_to_inven(atk3, assault);
           case 3: add_obj_to_inven(atk4, assault);
        end
        case 2:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, SMG);
           case 1: add_obj_to_inven(atk2, SMG);
           case 2: add_obj_to_inven(atk3, SMG);
           case 3: add_obj_to_inven(atk4, SMG);
        end
        case 3:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, grenFrag);
           case 1: add_obj_to_inven(atk2, grenFrag);
           case 2: add_obj_to_inven(atk3, grenFrag);
           case 3: add_obj_to_inven(atk4, grenFrag);
        end
        case 4:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, spear);
           case 1: add_obj_to_inven(atk2, spear);
           case 2: add_obj_to_inven(atk3, spear);
           case 3: add_obj_to_inven(atk4, spear);
        end
        case 5:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, knife);
           case 1: add_obj_to_inven(atk2, knife);
           case 2: add_obj_to_inven(atk3, knife);
           case 3: add_obj_to_inven(atk4, knife);
        end
     end
   end

   wepSelect := random(0, 5);
   wepSelect2 := random(0, 5);
   raidSelect := random(0, 4);
   dist := random(1, 3);
   if global_var(246) == 1 then begin
     critter_attempt_placement(atk6, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
     add_obj_to_inven(atk6, shotgun);
     add_obj_to_inven(atk6, knife);
     wield_obj_critter(atk6, shotgun);
   end
   else begin
      switch(raidSelect) begin
        case 0: critter_attempt_placement(atk1, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
        case 1: critter_attempt_placement(atk2, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
        case 2: critter_attempt_placement(atk3, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
        case 3: critter_attempt_placement(atk4, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
     end
     switch(wepSelect) begin
        case 0:
        switch(raidSelect) begin //Equiping weapons for every case of random raider
           case 0: add_obj_to_inven(atk1, shotgun);
           wield_obj_critter(atk1, shotgun);
           case 1: add_obj_to_inven(atk2, shotgun);
           wield_obj_critter(atk2, shotgun);
           case 2: add_obj_to_inven(atk3, shotgun);
           wield_obj_critter(atk3, shotgun);
           case 3: add_obj_to_inven(atk4, shotgun);
           wield_obj_critter(atk4, shotgun);
        end
        case 1:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, assault);
           wield_obj_critter(atk1, assault);
           case 1: add_obj_to_inven(atk2, assault);
           wield_obj_critter(atk2, assault);
           case 2: add_obj_to_inven(atk3, assault);
           wield_obj_critter(atk3, assault);
           case 3: add_obj_to_inven(atk4, assault);
           wield_obj_critter(atk4, assault);
        end
        case 2:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, SMG);
           wield_obj_critter(atk1, SMG);
           case 1: add_obj_to_inven(atk2, SMG);
           wield_obj_critter(atk2, SMG);
           case 2: add_obj_to_inven(atk3, SMG);
           wield_obj_critter(atk3, SMG);
           case 3: add_obj_to_inven(atk4, SMG);
           wield_obj_critter(atk4, SMG);
        end
        case 3:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, grenFrag);
           wield_obj_critter(atk1, grenFrag);
           case 1: add_obj_to_inven(atk2, grenFrag);
           wield_obj_critter(atk2, grenFrag);
           case 2: add_obj_to_inven(atk3, grenFrag);
           wield_obj_critter(atk3, grenFrag);
           case 3: add_obj_to_inven(atk4, grenFrag);
           wield_obj_critter(atk4, grenFrag);
        end
        case 4:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, spear);
           wield_obj_critter(atk1, spear);
           case 1: add_obj_to_inven(atk2, spear);
           wield_obj_critter(atk2, spear);
           case 2: add_obj_to_inven(atk3, spear);
           wield_obj_critter(atk3, spear);
           case 3: add_obj_to_inven(atk4, spear);
           wield_obj_critter(atk4, spear);
        end
        case 5:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, knife);
           wield_obj_critter(atk1, knife);
           case 1: add_obj_to_inven(atk2, knife);
           wield_obj_critter(atk2, knife);
           case 2: add_obj_to_inven(atk3, knife);
           wield_obj_critter(atk3, knife);
           case 3: add_obj_to_inven(atk4, knife);
           wield_obj_critter(atk4, knife);
        end
     end
     switch(wepSelect2) begin
        case 0:
        switch(raidSelect) begin //Equiping weapons for every case of random raider
           case 0: add_obj_to_inven(atk1, shotgun);
           case 1: add_obj_to_inven(atk2, shotgun);
           case 2: add_obj_to_inven(atk3, shotgun);
           case 3: add_obj_to_inven(atk4, shotgun);
        end
        case 1:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, assault);
           case 1: add_obj_to_inven(atk2, assault);
           case 2: add_obj_to_inven(atk3, assault);
           case 3: add_obj_to_inven(atk4, assault);
        end
        case 2:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, SMG);
           case 1: add_obj_to_inven(atk2, SMG);
           case 2: add_obj_to_inven(atk3, SMG);
           case 3: add_obj_to_inven(atk4, SMG);
        end
        case 3:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, grenFrag);
           case 1: add_obj_to_inven(atk2, grenFrag);
           case 2: add_obj_to_inven(atk3, grenFrag);
           case 3: add_obj_to_inven(atk4, grenFrag);
        end
        case 4:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, spear);
           case 1: add_obj_to_inven(atk2, spear);
           case 2: add_obj_to_inven(atk3, spear);
           case 3: add_obj_to_inven(atk4, spear);
        end
        case 5:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, knife);
           case 1: add_obj_to_inven(atk2, knife);
           case 2: add_obj_to_inven(atk3, knife);
           case 3: add_obj_to_inven(atk4, knife);
        end
     end
   end

   wepSelect := random(0, 5);
   wepSelect2 := random(0, 5);
   raidSelect := random(0, 4);
   dist := random(1, 3);
   if global_var(246) == 1 then begin
     critter_attempt_placement(atk7, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
     add_obj_to_inven(atk7, knife);
     add_obj_to_inven(atk7, grenFrag);
     wield_obj_critter(atk7, knife);
   end
   else begin
     switch(raidSelect) begin
        case 0: critter_attempt_placement(atk1, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
        case 1: critter_attempt_placement(atk2, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
        case 2: critter_attempt_placement(atk3, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
        case 3: critter_attempt_placement(atk4, tile_num_in_direction(tile_num(dude_obj)+dist, 0, 1), elevation(dude_obj));
     end
     switch(wepSelect) begin
        case 0:
        switch(raidSelect) begin //Equiping weapons for every case of random raider
           case 0: add_obj_to_inven(atk1, shotgun);
           wield_obj_critter(atk1, shotgun);
           case 1: add_obj_to_inven(atk2, shotgun);
           wield_obj_critter(atk2, shotgun);
           case 2: add_obj_to_inven(atk3, shotgun);
           wield_obj_critter(atk3, shotgun);
           case 3: add_obj_to_inven(atk4, shotgun);
           wield_obj_critter(atk4, shotgun);
        end
        case 1:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, assault);
           wield_obj_critter(atk1, assault);
           case 1: add_obj_to_inven(atk2, assault);
           wield_obj_critter(atk2, assault);
           case 2: add_obj_to_inven(atk3, assault);
           wield_obj_critter(atk3, assault);
           case 3: add_obj_to_inven(atk4, assault);
           wield_obj_critter(atk4, assault);
        end
        case 2:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, SMG);
           wield_obj_critter(atk1, SMG);
           case 1: add_obj_to_inven(atk2, SMG);
           wield_obj_critter(atk2, SMG);
           case 2: add_obj_to_inven(atk3, SMG);
           wield_obj_critter(atk3, SMG);
           case 3: add_obj_to_inven(atk4, SMG);
           wield_obj_critter(atk4, SMG);
        end
        case 3:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, grenFrag);
           wield_obj_critter(atk1, grenFrag);
           case 1: add_obj_to_inven(atk2, grenFrag);
           wield_obj_critter(atk2, grenFrag);
           case 2: add_obj_to_inven(atk3, grenFrag);
           wield_obj_critter(atk3, grenFrag);
           case 3: add_obj_to_inven(atk4, grenFrag);
           wield_obj_critter(atk4, grenFrag);
        end
        case 4:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, spear);
           wield_obj_critter(atk1, spear);
           case 1: add_obj_to_inven(atk2, spear);
           wield_obj_critter(atk2, spear);
           case 2: add_obj_to_inven(atk3, spear);
           wield_obj_critter(atk3, spear);
           case 3: add_obj_to_inven(atk4, spear);
           wield_obj_critter(atk4, spear);
        end
        case 5:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, knife);
           wield_obj_critter(atk1, knife);
           case 1: add_obj_to_inven(atk2, knife);
           wield_obj_critter(atk2, knife);
           case 2: add_obj_to_inven(atk3, knife);
           wield_obj_critter(atk3, knife);
           case 3: add_obj_to_inven(atk4, knife);
           wield_obj_critter(atk4, knife);
        end
     end
     switch(wepSelect2) begin
        case 0:
        switch(raidSelect) begin //Equiping weapons for every case of random raider
           case 0: add_obj_to_inven(atk1, shotgun);
           case 1: add_obj_to_inven(atk2, shotgun);
           case 2: add_obj_to_inven(atk3, shotgun);
           case 3: add_obj_to_inven(atk4, shotgun);
        end
        case 1:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, assault);
           case 1: add_obj_to_inven(atk2, assault);
           case 2: add_obj_to_inven(atk3, assault);
           case 3: add_obj_to_inven(atk4, assault);
        end
        case 2:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, SMG);
           case 1: add_obj_to_inven(atk2, SMG);
           case 2: add_obj_to_inven(atk3, SMG);
           case 3: add_obj_to_inven(atk4, SMG);
        end
        case 3:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, grenFrag);
           case 1: add_obj_to_inven(atk2, grenFrag);
           case 2: add_obj_to_inven(atk3, grenFrag);
           case 3: add_obj_to_inven(atk4, grenFrag);
        end
        case 4:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, spear);
           case 1: add_obj_to_inven(atk2, spear);
           case 2: add_obj_to_inven(atk3, spear);
           case 3: add_obj_to_inven(atk4, spear);
        end
        case 5:
        switch(raidSelect) begin
           case 0: add_obj_to_inven(atk1, knife);
           case 1: add_obj_to_inven(atk2, knife);
           case 2: add_obj_to_inven(atk3, knife);
           case 3: add_obj_to_inven(atk4, knife);
        end
     end
   end
end

procedure ally begin
   gsay_reply(136, "Well, you could stand watch here with me. We may be raiders, but others also raid us for our riches.");
   gsay_option(136, "Of course", defend, 50);
   gsay_option(136, "That sounds uninteresting; I just wanted to talk", guardend, 50);
end

procedure talk_p_proc begin
   if (local_var(5) == 1) then begin
      display_msg(message_str(136, 100));
   end
   else begin
      if (global_var(116) == 1) then begin //Raiders think you are Garl's dad
         call guard00();
      end
      else begin
         if ((Weapons == 1) and (killing_women == 0) and (global_var(611) != 1)) then begin
            call guard02();
         end
         else if global_var(611) == 1 then begin //Default when Garl's friend
            start_gdialog(136, self_obj, 4, -1, -1);
            gsay_start;
            gsay_reply(136, "Welcome to the base of the Khans. What do you want?");
            gsay_option(136, "What can I do to help you?", ally, 50);
            gsay_option(136, "Nothing, just wanted to talk", guardend, 50);
            gsay_end;
            end_dialogue;
         end
         else begin
            set_local_var(3, 1);
            call get_reaction();
            start_gdialog(136, self_obj, 4, -1, -1);
            gsay_start;
            if (local_var(4) == 0) then begin
               set_local_var(4, 1);
               call guard04();
            end
            else begin
               call guard15();
            end
            gsay_end;
            end_dialogue;
         end
      end
   end
end

procedure Critter_Action begin
   if (hostile) then begin
      hostile := 0;
      set_global_var(254, 1);
      attack_complex(dude_obj, 0, 1, 0, 0, 30000, 0, 0);
   end
   else begin
      if ((global_var(26) == 2) or global_var(213) or (map_var(2) == 1) or global_var(214)) then begin
         set_global_var(254, 1);
      end
   end
   if (global_var(116)) then begin
      set_global_var(254, 0);
      if (obj_can_see_obj(self_obj, dude_obj)) then begin
         if (local_var(7) == 0) then begin
            set_local_var(7, 1);
            LastTime := game_time;
            float_msg(self_obj, message_str(136, random(102, 106)), 8);
         end
         else begin
            if ((anim_busy(self_obj) == 0) and ((game_time - LastTime) > 100)) then begin
               rndz := random(0, 20);
               if ((tile_distance_objs(self_obj, dude_obj) < 6) and (rndz == 1)) then begin
                  LastTime := game_time;
                  float_msg(self_obj, message_str(136, random(102, 106)), 8);
               end
            end
         end
      end
   end
   else begin
      if (obj_can_see_obj(self_obj, dude_obj)) then begin
         if (global_var(254)) then begin
            hostile := 1;
         end
         else begin
            if (global_var(611) != 1) then begin
               call items_held();
               if ((PIDright != 79) and (PIDright != 205) and (PIDleft != 79) and (PIDleft != 205) and (SubtypeWEP == 1) and ((Weapons == 0) and (killing_women == 0))) then begin
                  Weapons := 1;
                  dialogue_system_enter;
               end
            end
         end
      end
   end
end

procedure damage_p_proc begin
   if (source_obj > 0) then begin
      SrcObj := 0;
      SrcIsParty := 0;
      SrcObj := obj_pid(source_obj);
      if (party_member_obj(SrcObj)) then begin
         SrcIsParty := 1;
      end
   end
   if ((source_obj == dude_obj) or (SrcIsParty == 1)) then begin
      if (global_var(116) == 0) then begin
         set_global_var(254, 1);
      end
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == 1) then begin
      call items_held();
      if ((PIDright != 79) and (PIDright != 205) and (PIDleft != 79) and (PIDleft != 205) and (SubtypeWEP == 1)) then begin
         call combat();
      end
   end
   else begin
      if (fixed_param == 2) then begin
         if (tile_distance_objs(self_obj, dude_obj) < 6) then begin
            call combat();
         end
      end
      else begin
         if (fixed_param == 3) then begin
            if (tile_distance_objs(self_obj, dude_obj) < 8) then begin
               call combat();
            end
         end
      end
   end
end

procedure description_p_proc begin
   script_overrides;
   if (get_critter_stat(self_obj, 34) == 0) then begin
      display_msg(message_str(136, random(200, 202)));
   end
   else begin
      display_msg(message_str(136, random(203, 205)));
   end
end

procedure guard00 begin
   float_msg(self_obj, message_str(136, random(102, 106)), 8);
end

procedure guard01 begin
   float_msg(self_obj, message_str(136, random(107, 111)), 8);
end

procedure guard02 begin
   float_msg(self_obj, message_str(136, random(112, 115)), 8);
   add_timer_event(self_obj, game_ticks(9), 1);
end

procedure guard03 begin
   float_msg(self_obj, message_str(136, random(116, 118)), 8);
   add_timer_event(self_obj, game_ticks(10), 2);
end

procedure guard04 begin
   gsay_reply(136, 119);
   if ((global_var(103) == 1) and (global_var(218) == 1)) then begin
      giq_option(4, 136, 120, guard07, 50);
   end
   giq_option(4, 136, 121, guard06, 50);
   giq_option(-3, 136, 122, guard05, 50);
end

procedure guard05 begin
   gsay_message(136, 123, 50);
end

procedure guard06 begin
   gsay_message(136, 124, 50);
   call DownReact();
end

procedure guard07 begin
   gsay_reply(136, 125);
   giq_option(4, 136, 126, guard08, 50);
   giq_option(6, 136, 127, guard07a, 50);
   if (is_success(do_check(dude_obj, 1, 0))) then begin
      giq_option(4, 136, 128, guard07b, 50);
   end
end

procedure guard07a begin
   if (is_success(roll_vs_skill(dude_obj, 14, 0))) then begin
      call guard09();
   end
   else begin
      call guard11();
   end
end

procedure guard07b begin
   if (is_success(roll_vs_skill(dude_obj, 14, -20))) then begin
      call guard12();
   end
   else begin
      call guard13();
   end
end

procedure guard08 begin
   gsay_message(136, 129, 50);
end

procedure guard09 begin
   gsay_reply(136, 130);
   giq_option(6, 136, 131, guard10, 50);
end

procedure guard10 begin
   gsay_message(136, 132, 50);
end

procedure guard11 begin
   gsay_message(136, 133, 50);
end

procedure guard12 begin
   gsay_message(136, 134, 50);
   set_local_var(5, 1);
end

procedure guard13 begin
   gsay_message(136, 135, 50);
   call combat();
end

procedure guard14 begin
   gsay_message(136, 136, 50);
   add_timer_event(self_obj, game_ticks(12), 3);
end

procedure guard15 begin
   gsay_message(136, 137, 50);
end

procedure guardend begin
   gsay_message(136, "I don't have the tolerance to 'just talk'. Leave if you don't have anything for me", 50);
end

procedure combat begin
   if (global_var(116) == 1) then begin
      critter_add_trait(self_obj, 1, 6, 87);
   end
   hostile := 1;
end

procedure PickDeadBodyType begin
   variable LVar0 := 0;
   variable LVar1 := 0;
   LVar0 := random(0, 6) + random(0, 6) + random(0, 6);
   if (LVar0 <= 5) then begin
      DeathType := 57;
   end
   else begin
      if (LVar0 <= 10) then begin
         DeathType := 56;
      end
      else begin
         if (LVar0 <= 14) then begin
            DeathType := 53;
         end
         else begin
            if (LVar0 <= 16) then begin
               DeathType := 63;
            end
            else begin
               LVar1 := random(0, 2);
               if (LVar1 == 0) then begin
                  DeathType := 54;
               end
               else begin
                  if (LVar1 == 1) then begin
                     DeathType := 59;
                  end
                  else begin
                     if (LVar1 == 2) then begin
                        DeathType := 60;
                     end
                  end
               end
            end
         end
      end
   end
end

procedure items_held begin
   SubtypeWEP := 0;
   if (critter_inven_obj(dude_obj, 1)) then begin
      RightHand := critter_inven_obj(dude_obj, 1);
      PIDright := obj_pid(RightHand);
      if (obj_item_subtype(RightHand) == 3) then begin
         SubtypeWEP := 1;
      end
   end
   else begin
      RightHand := 0;
      PIDright := 0;
   end
   if (critter_inven_obj(dude_obj, 2)) then begin
      LeftHand := critter_inven_obj(dude_obj, 2);
      PIDleft := obj_pid(LeftHand);
      if (obj_item_subtype(LeftHand) == 3) then begin
         SubtypeWEP := 1;
      end
   end
   else begin
      LeftHand := 0;
      PIDleft := 0;
   end
end

procedure get_reaction begin
   if (local_var(2) == 0) then begin
      set_local_var(0, 50);
      set_local_var(1, 2);
      set_local_var(2, 1);
      set_local_var(0, local_var(0) + (5 * get_critter_stat(dude_obj, 3)) - 25);
      set_local_var(0, local_var(0) + (10 * has_trait(0, dude_obj, 10)));
      if (has_trait(0, dude_obj, 39)) then begin
         if (global_var(155) > 0) then begin
            set_local_var(0, local_var(0) + global_var(155));
         end
         else begin
            set_local_var(0, local_var(0) - global_var(155));
         end
      end
      else begin
         if (local_var(3) == 1) then begin
            set_local_var(0, local_var(0) - global_var(155));
         end
         else begin
            set_local_var(0, local_var(0) + global_var(155));
         end
      end
      if (global_var(158) >= global_var(545)) then begin
         set_local_var(0, local_var(0) - 30);
      end
      if (((global_var(160) + global_var(159)) >= 25) and ((global_var(160) > (3 * global_var(159))) or (global_var(157) == 1))) then begin
         set_local_var(0, local_var(0) + 20);
      end
      if (((global_var(160) + global_var(159)) >= 25) and ((global_var(159) > (2 * global_var(160))) or (global_var(317) == 1))) then begin
         set_local_var(0, local_var(0) - 20);
      end
      call ReactToLevel();
   end
end

procedure ReactToLevel begin
   if (local_var(0) <= 25) then begin
      set_local_var(1, 1);
   end
   else begin
      if (local_var(0) <= 75) then begin
         set_local_var(1, 2);
      end
      else begin
         set_local_var(1, 3);
      end
   end
end

procedure LevelToReact begin
   if (local_var(1) == 1) then begin
      set_local_var(0, random(1, 25));
   end
   else begin
      if (local_var(1) == 2) then begin
         set_local_var(0, random(26, 75));
      end
      else begin
         set_local_var(0, random(76, 100));
      end
   end
end

procedure UpReact begin
   set_local_var(0, local_var(0) + 10);
   call ReactToLevel();
end

procedure DownReact begin
   set_local_var(0, local_var(0) - 10);
   call ReactToLevel();
end

procedure BottomReact begin
   set_local_var(1, 1);
   set_local_var(0, 1);
end

procedure TopReact begin
   set_local_var(0, 100);
   set_local_var(1, 3);
end

procedure BigUpReact begin
   set_local_var(0, local_var(0) + 25);
   call ReactToLevel();
end

procedure BigDownReact begin
   set_local_var(0, local_var(0) - 25);
   call ReactToLevel();
end

procedure UpReactLevel begin
   set_local_var(1, local_var(1) + 1);
   if (local_var(1) > 3) then begin
      set_local_var(1, 3);
   end
   call LevelToReact();
end

procedure DownReactLevel begin
   set_local_var(1, local_var(1) - 1);
   if (local_var(1) < 1) then begin
      set_local_var(1, 1);
   end
   call LevelToReact();
end

procedure Goodbyes begin
   exit_line := message_str(634, random(100, 105));
end

